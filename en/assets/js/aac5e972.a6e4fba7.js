"use strict";(self.webpackChunkadvancedfmk_wiki=self.webpackChunkadvancedfmk_wiki||[]).push([[568],{6593:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=t(4848),a=t(8453);const r={},o="Use the font engine",s={id:"advancedfmk-fontengine/1api",title:"Use the font engine",description:"Font engine examples",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/advancedfmk-fontengine/1api.md",sourceDirName:"advancedfmk-fontengine",slug:"/advancedfmk-fontengine/1api",permalink:"/advancedfmk-wiki/en/docs/advancedfmk-fontengine/1api",draft:!1,unlisted:!1,editUrl:"https://github.com/PrimogemStudio/advancedfmk-wiki/blob/main/docs/advancedfmk-fontengine/1api.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Vector font processing",permalink:"/advancedfmk-wiki/en/docs/advancedfmk-fontengine/0description"},next:{title:"Advanced Framework - \u4ee3\u7801\u8d21\u732e\u8bf4\u660e",permalink:"/advancedfmk-wiki/en/docs/category/advanced-framework---\u4ee3\u7801\u8d21\u732e\u8bf4\u660e"}},c={},l=[{value:"Font engine examples",id:"font-engine-examples",level:2},{value:"Use (Internal font)",id:"use-internal-font",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"use-the-font-engine",children:"Use the font engine"})}),"\n",(0,i.jsx)(n.h2,{id:"font-engine-examples",children:"Font engine examples"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Example can be found on ",(0,i.jsx)(n.a,{href:"https://github.com/PrimogemStudio/Advanced-Framework/blob/main/src/main/java/com/primogemstudio/advancedfmk/mixin/TitleScreenFontEngineMixin.java",children:"Github"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"use-internal-font",children:"Use (Internal font)"}),"\n",(0,i.jsx)(n.p,{children:"Create a mixin class  (The following code is written using the official mappings)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",metastring:'title="FontEngineToturialMixin.java"',children:'@Mixin(TitleScreen.class) // The location of the injection, which can be any Screen class\npublic class FontEngineToturialMixin {\n    // Font render buffer, which is used to stage render results\n    @Unique\n    private static final TextureTarget fontInternal = new TextureTarget(1, 1, true, Util.getPlatform() == Util.OS.OSX);\n    // Compose font definition\n    @Unique\n    private static final ComposedFont font = new ComposedFont();\n    static {\n        fontInternal.setClearColor(1f, 1f, 1f, 0f);\n    }\n\n    @Inject(at = @At("RETURN"), method = "render")\n    public void render(GuiGraphics graphics, int mouseX, int mouseY, float partialTick, CallbackInfo ci) {\n        fontInternal.clear(Util.getPlatform() == Util.OS.OSX);\n        // Set the buffer result to 4 times the window size\n        fontInternal.resize(Minecraft.getInstance().getWindow().getWidth() * 4, Minecraft.getInstance().getWindow().getHeight() * 4, Util.getPlatform() == Util.OS.OSX);\n        fontInternal.bindWrite(true);\n        RenderSystem.setShader(GameRenderer::getPositionColorShader);\n        var buff = Tesselator.getInstance().getBuilder();\n        var scale = (float) Minecraft.getInstance().getWindow().getGuiScale();\n        var poseStack = graphics.pose();\n        poseStack.pushPose();\n        poseStack.scale(1 / scale, 1 / scale, 1);\n        buff.begin(VertexFormat.Mode.TRIANGLES, DefaultVertexFormat.POSITION_COLOR);\n        poseStack.popPose();\n        // Invoke the font engine to write font vertices to the vertex buffer buff\n        font.drawWrapText(buff, poseStack, "\u6d4b\u8bd5abcd\uff1f?!", 200, 200, 9, 25, 0xffffffff);\n        // Enables blending, disables culling (prevents vertex orientation from rendering)\n        RenderSystem.enableBlend();\n        RenderSystem.disableCull();\n        BufferUploader.drawWithShader(buff.end());\n        RenderSystem.enableCull();\n        RenderSystem.disableBlend();\n        // Use the TEXT_BLUR post-processing shader to add anti-aliasing to the buffer result and render it to the screen\n        Shaders.INSTANCE.getTEXT_BLUR().setSamplerUniform("BaseLayer", fontInternal);\n        Shaders.INSTANCE.getTEXT_BLUR().render(partialTick);\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Or directly use the ",(0,i.jsx)(n.code,{children:"BufferManager"})," wrapper"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="FontEngineToturialMixin"',children:'@Mixin(TitleScreen.class)\npublic class TitleScreenFontEngineMixin {\n    @Unique\n    private static final ComposedFont font = new ComposedFont();\n\n    @Inject(at = @At("RETURN"), method = "render")\n    public void render(GuiGraphics graphics, int mouseX, int mouseY, float partialTick, CallbackInfo ci) {\n        BufferManager.INSTANCE.updateBufferColor(0xffffffff); // \u8bbe\u7f6e\u7f13\u51b2\u533a\u989c\u8272\uff0c\u9632\u6b62\u989c\u8272\u6df7\u5408\n        BufferManager.INSTANCE.renderText((vertexConsumer, poseStack) -> {\n            font.drawWrapText(vertexConsumer, poseStack, "\u6d4b\u8bd5abcd\uff1f?!", 200, 200, 9, 25, 0xffffffff);\n            return null;\n        }, graphics, partialTick);\n    }\n}\n'})})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(6540);const a={},r=i.createContext(a);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);